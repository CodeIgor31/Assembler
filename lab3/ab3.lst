     1                                  %include "lib64.asm"
     2                              <1>          section .text     ; сегмент кода
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    18 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    19 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    21 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    22                              <1>                        ; предыдущую позицию
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    50 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    51 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    54 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    55 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    56 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    57 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    58 00000073 6698                <1>          cbw            ; расширяем до слова
    59 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    60 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    61 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    62 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  section .data ; СЃРµРіРјРµРЅС‚ РёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     3 00000000 496E70757420713A20-     Input_Q db "Input q: ",10 ; РІС‹РІРѕРґРёРјРѕРµ СЃРѕРѕР±С‰РµРЅРёРµ
     3 00000009 0A                 
     4                                  lenQ equ $-Input_Q
     5 0000000A 496E70757420643A20-     Input_D db "Input d: ",10 ;
     5 00000013 0A                 
     6                                  lenD equ $-Input_D
     7 00000014 54686520726573756C-     Res_text db "The result is: ", 10
     7 0000001D 742069733A200A     
     8                                  section .bss ; СЃРµРіРјРµРЅС‚ РЅРµРёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     9 00000000 ????                    q resw 1
    10 00000002 <res Ah>                Buf_Q resb 10 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    11 0000000C ????                    d resw 1
    12 0000000E <res Ah>                Buf_D resb 10 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    13 00000018 ????                    res resw 1 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    14 0000001A <res Ah>                Buf_res resb 10 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    15                                  section .text ; СЃРµРіРјРµРЅС‚ РєРѕРґР°
    16                                  global _start
    17                                  _start:
    18                                  ; write q
    19 000000A9 B801000000                  mov rax, 1; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    20 000000AE BF01000000                  mov rdi, 1; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    21 000000B3 48BE-                       mov rsi, Input_Q ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    21 000000B5 [0000000000000000] 
    22 000000BD BA0A000000                  mov rdx, lenQ ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    23                                      ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    24 000000C2 0F05                        syscall
    25                                      
    26                                      ; read
    27 000000C4 B800000000                  mov rax, 0; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 0 (read)
    28 000000C9 BF00000000                  mov rdi, 0; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdin=0
    29 000000CE 48BE-                       mov rsi, Buf_Q; Р°РґСЂРµСЃ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    29 000000D0 [0200000000000000] 
    30 000000D8 BA0A000000                  mov rdx, 10; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    31                                      ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    32 000000DD 0F05                        syscall
    33                                      
    34 000000DF 48BE-                       mov rsi, Buf_Q
    34 000000E1 [0200000000000000] 
    35 000000E9 E864FFFFFF                  call StrToInt64
    36 000000EE 48890425[00000000]          mov [q], rax
    37                                  
    38                                  ;write d
    39 000000F6 B801000000                  mov rax, 1; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    40 000000FB BF01000000                  mov rdi, 1; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    41 00000100 48BE-                       mov rsi, Input_D ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    41 00000102 [0A00000000000000] 
    42 0000010A BA0A000000                  mov rdx, lenD ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    43                                      ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    44 0000010F 0F05                        syscall
    45                                      
    46                                      ; read
    47 00000111 B800000000                  mov rax, 0; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 0 (read)
    48 00000116 BF00000000                  mov rdi, 0; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdin=0
    49 0000011B 48BE-                       mov rsi, Buf_D; Р°РґСЂРµСЃ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    49 0000011D [0E00000000000000] 
    50 00000125 BA0A000000                  mov rdx, 10; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    51                                      ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    52 0000012A 0F05                        syscall
    53                                      
    54 0000012C 48BE-                       mov rsi, Buf_D
    54 0000012E [0E00000000000000] 
    55 00000136 E817FFFFFF                  call StrToInt64
    56 0000013B 48890425[0C000000]          mov [d], rax
    57 00000143 488B0425[00000000]      mov rax,[q]
    58 0000014B 4883F80A                cmp rax,10 ; СЃСЂР°РІРЅРµРЅРёРµ q Рё 10
    59 0000014F 7C02                    jl less ; РїРµСЂРµС…РѕРґ РїРѕ РјРµРЅСЊС€Рµ
    60 00000151 EB32                    jmp else ; РїРµСЂРµС…РѕРґ РЅР° РєРѕРЅРµС† РІРµС‚РІР»РµРЅРёСЏ
    61                                  less:
    62 00000153 48F7E0                  mul rax
    63 00000156 488B0C25[0C000000]      mov rcx, [d]
    64 0000015E 4883E905                sub rcx, 5
    65 00000162 4883F900                cmp rcx, 0 ;РћР”Р—
    66 00000166 7439                    jz continue ;РћР”Р—
    67 00000168 48F7F9                  idiv rcx
    68 0000016B 48890425[18000000]      mov [res], rax
    69 00000173 488B0C25[0C000000]      mov rcx, [d]
    70 0000017B 48010C25[18000000]      add [res], rcx
    71 00000183 EB1C                    jmp continue
    72                                  
    73                                  else:
    74 00000185 488B0425[0C000000]      mov rax, [d]
    75 0000018D 482B0425[00000000]      sub rax, [q]
    76 00000195 486BC005                imul rax, 5
    77 00000199 48890425[18000000]      mov [res], rax
    78                                  continue:
    79                                  ;output
    80 000001A1 48BE-                   mov rsi, Buf_res
    80 000001A3 [1A00000000000000] 
    81 000001AB 488B0425[18000000]      mov rax, [res]
    82 000001B3 E848FEFFFF              call IntToStr64
    83                                  
    84 000001B8 B801000000              mov rax, 1; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    85 000001BD BF01000000              mov rdi, 1; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    86 000001C2 48BE-                   mov rsi, Res_text ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    86 000001C4 [1400000000000000] 
    87 000001CC BA0F000000              mov rdx, 15 ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    88 000001D1 0F05                    syscall  
    89                                                               
    90 000001D3 B801000000              mov rax, 1; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    91 000001D8 BF01000000              mov rdi, 1; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    92 000001DD 48BE-                   mov rsi, Buf_res ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    92 000001DF [1A00000000000000] 
    93 000001E7 BA05000000              mov rdx, 5 ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    94 000001EC 0F05                    syscall    
    95                                  ; exit
    96 000001EE B83C000000              mov rax, 60 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 60
    97 000001F3 4831FF                  xor rdi, rdi ; return code 0syscall
